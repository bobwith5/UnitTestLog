<?xml version="1.0" encoding="utf-8"?>
<project name="Qunit Build" default="Main Build">
  <include buildfile="CommonProperties.include" />
  <property name="UnitTestResultFilePath" value="C:\UnitTestResults\1.0.${NewBuildNumber}\results.trx"/>
  <property name="msTestPath" value="C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\IDE\mstest.exe"/>


  <property name="UnitTestMode" value="" overwrite="false"/>
  <property name="cacheName" value="" />
  <property name="generateXCConfig" value="false" overwrite="false" />

  <!-- Bitmask enabled Integration tests related -->
  <property name="TestDefinitionFilePath" value="DataLabsXC.IntegrationTest\TestDefinitionConfiguration.xml" overwrite="false" />
  <property name="IntegrationTestsBitMask" value="0" overwrite="false" />
  <property name="IntegrationTestName" value="" overwrite="true" />
  <property name="IntegrationTestContainer" value="" overwrite="true" />
  <property name="IntegrationTestCategory" value="" overwrite="true" />
  <property name="TestsToExecute" value="1,2" overwrite="false" />
  <property name="GenerateArtifacts" value="false" overwrite="true" />

  <property name="GenerateIntegrationTestDoc" value="false" overwrite="false" />
  <script language="C#">

    <references>
      <include name="System.Xml.dll" />
    </references>
    <code>
      <![CDATA[
		public static void ScriptMain(Project project)
		{ 
            var doc = new  System.Xml.XmlDocument();
            doc.Load(project.Properties["projectRootPath"] + "\\" + project.Properties["TestDefinitionFilePath"]);

            System.Xml.XmlNodeList testNodes = doc.SelectNodes("/TestDefinitionConfiguration/*");
            if (testNodes == null)
            {
                throw new Exception("No TestDefinitionConfiguration node was found in the XML document.");
            }

			uint selections = Convert.ToUInt32(project.Properties["IntegrationTestsBitMask"]);
            int index = 1;
            int executeTestCount = 0;
            bool isFirstRecord = true;
            var testsToExecute = new StringBuilder();
            foreach (System.Xml.XmlNode testNode in testNodes)
            {
                uint switchValue = Convert.ToUInt32(testNode.Attributes["Value"].InnerText);
                if ((selections & switchValue) != 0)
                {
                    executeTestCount++;
                    Console.WriteLine(testNode.Attributes["Name"].InnerText);
                    if (isFirstRecord)
                    {
                        testsToExecute.Append(index);
                    }
                    else
                    {
                        testsToExecute.Append(String.Format(",{0}", index));
                    }

                    isFirstRecord = false;
                }

                index++;
            }

			if (testNodes.Count == executeTestCount)
			{
				project.Properties["GenerateArtifacts"] = "true";
			}
			
			project.Properties["TestsToExecute"] = testsToExecute.ToString();
		}


      ]]>
    </code>

  </script>
  <target name="Main Build">
    <!--<setinformationalversion productname="${productName}" newbuildnumber="${NewBuildNumber}">
      <fileset basedir="${projectRootPath}\">
        <include name="**/AssemblyInfo.*"/>
        <exclude name="**/Shared/**"/>
      </fileset>
    </setinformationalversion>-->
    <call target="CompileAll" />
    <!--<call target="QunitTest" />-->
    <call target="Execute Integration Unit Test"/>
    <!--<call target="Cleanup" />-->

    <!--<call target="Copy Files" />
    <call target="Zip" />-->
  </target>

  <target name="CompileAll">
    <echo>Compile solution...</echo>
    <exec program="${devEnvPath}">
      <arg value="${ProjectCodePath}\DataLabsXC.IntegrationTest.sln"/>
      <arg value="/Rebuild"/>
      <arg value="${build.configuration}"/>
    </exec>
  </target>

  <target name="Execute Integration Unit Test">
    <echo>
      Deleting Unit Test Results file
    </echo>
    <delete file="${UnitTestResultFilePath}" />
    <echo>Running Unit Test</echo>
    <mkdir dir="${path::get-directory-name(UnitTestResultFilePath)}"
			   if="${not directory::exists(path::get-directory-name(UnitTestResultFilePath))}" />
    <foreach item="String" in="${TestsToExecute}" delim="," property="count">
      <xmlpeek file="${projectRootPath}\${TestDefinitionFilePath}" xpath="//TestDefinitionConfiguration/Test[${count}]/@Name" property="IntegrationTestName" />
      <echo message="${IntegrationTestName}" />

      <xmlpeek file="${projectRootPath}\${TestDefinitionFilePath}" xpath="/DataLabsXC.IntegrationTest/TestDefinitionConfiguration/Test[${count}]/@TestContainer" property="IntegrationTestContainer" />
      <echo message="${IntegrationTestContainer}" />

      <xmlpeek file="${projectRootPath}\${TestDefinitionFilePath}" xpath="/DataLabsXC.IntegrationTest/TestDefinitionConfiguration/Test[${count}]/@Category" property="IntegrationTestCategory" failonerror="false" verbose="true" />
      <echo message="${IntegrationTestCategory}" />

      <echo message="Executing ${IntegrationTestContainer} ..." />

      <choose>
        <when test="${string::get-length(IntegrationTestCategory) > 0}">
          <exec program="${msTestPath}">
            <arg value="/testcontainer:${projectRootPath}\${IntegrationTestContainer}" />
            <arg value="/testsettings:${projectRootPath}\TestSettingsx64.testsettings " />
            <arg value="/resultsfile:${UnitTestResultFilePath}" />
            <arg value="/category:${IntegrationTestCategory}" />
            <arg value="/detail:errormessage" />
            <arg value="/detail:errorstacktrace" />
            <arg value="/detail:debugtrace" />
            <arg value="/detail:traceinfo" />
            <arg value="/detail:duration" />
          </exec>
        </when>
        <otherwise>
          <exec program="${msTestPath}">
            <arg value="/testcontainer:${projectRootPath}\${IntegrationTestContainer}" />
            <arg value="/testsettings:${projectRootPath}\TestSettingsx64.testsettings " />
            <arg value="/resultsfile:${UnitTestResultFilePath}" />
            <arg value="/detail:errormessage" />
            <arg value="/detail:errorstacktrace" />
            <arg value="/detail:debugtrace" />
            <arg value="/detail:traceinfo" />
            <arg value="/detail:duration" />
          </exec>
        </otherwise>

      </choose>

      <!--<delete file="${UnitTestResultFilePath}" />-->

    </foreach>
  </target> 


  <target name="Cleanup">
    <echo>Cleaning...</echo>

    <!-- from the parent folder down delete everything else
         this will insure, the previous zip file in sibling folders get removed -->
    <delete>
      <!-- <fileset basedir="${CDContentPath}">
        <include name="\**"/>
      </fileset>-->
    </delete>
  </target>

</project>
