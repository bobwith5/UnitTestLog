<?xml version="1.0" encoding="utf-8"?>
<project name="Qunit Build" default="Main Build">
  <include buildfile="CommonProperties.include" />
  <property name="UnitTestResultFilePath" value="C:\UnitTestResults\1.0.${NewBuildNumber}\results.trx"/>
  <property name="msTestPath" value="C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\IDE\mstest.exe"/>
  <property name="UnitTestResultLogFilePath" value="C:\UnitTestResults\1.0.${NewBuildNumber}\results.xml"/>
  <property name="StandardIntegrationResultFolder" value="C:\UnitTestResults\IntegrationResults"/>
  <property name="UnitTestMode" value="" overwrite="false"/>
  <property name="cacheName" value="" />
  <property name="generateXCConfig" value="false" overwrite="false" />

  <!-- Bitmask enabled Integration tests related -->
  <property name="TestDefinitionFilePath" value="DataLabsXC.IntegrationTest\DataLabsXC.IntegrationTest\testdefinition\TestDefinitionConfiguration.xml" overwrite="false" />
  <property name="IntegrationTestsBitMask" value="0" overwrite="false" />
  <property name="IntegrationTestName" value="" overwrite="true" />
  <property name="IntegrationTestContainer" value="" overwrite="true" />
  <property name="IntegrationTestCategory" value="" overwrite="true" />
  <property name="TestsToExecute" value="1,2" overwrite="false" />
  <property name="GenerateArtifacts" value="false" overwrite="true" />

  <property name="GenerateIntegrationTestDoc" value="false" overwrite="false" />
  <script language="C#" prefix="MyMethods" >
    <references>
      <include name="System.Xml.dll" />
    </references>
    <code>
      <![CDATA[
			[Function("SimpleFunction")]
			public static string SimpleFunction()
			{
				String buddhaSaying = "Say Hello";

				return buddhaSaying;
			}
			]]>
    </code>
  </script>
  <script language="C#" prefix="MyMethods" >
    <references>
      <include name="System.dll"/>
      <include name="System.Xml.dll" />
      <include name="System.Text.dll" />
      <include name="System.IO.dll" />
      <include name="System.Data.dll" />
    </references>
    <imports>
      <import namespace="System.Xml" />
      <import namespace="System.Text" />
      <import namespace="System.IO" />
      <import namespace="System.Data" />
    </imports>
    <code>
      <![CDATA[
			[Function("GetResults")]
			public static string GetResults(string source,string resultFileName )
        {
            XmlDocument xDoc = new XmlDocument();
            XmlDocument xmlDocument;
            xDoc.Load(source);
            XmlNode rootNode;
            var mgr = new XmlNamespaceManager(xDoc.NameTable);
            mgr.AddNamespace("", "http://schemas.microsoft.com/appx/2010/manifest");
            XmlNode root = xDoc.DocumentElement;
            var nodes = root.SelectNodes("//*[local-name()='TestRun']/*[local-name()='Results']/*[local-name()='TestResultAggregation']/*[local-name()='InnerResults']/*[local-name()='UnitTestResult']");
            if (!File.Exists(resultFileName))
            {
                xmlDocument = new XmlDocument();
                rootNode = xmlDocument.CreateNode(XmlNodeType.Element, "Results", null);
                xmlDocument.AppendChild(rootNode);
            }
            else
            {
                xmlDocument = new XmlDocument();
                xmlDocument.Load(resultFileName);
                rootNode = xmlDocument.DocumentElement;
            }
            foreach (XmlNode item in nodes)
            {
                XmlNode resultNode = xmlDocument.CreateNode(XmlNodeType.Element, "TestMethod", null);
                XmlAttribute className = xmlDocument.CreateAttribute("TestName");
               
                className.Value = item.Attributes["testName"].Value;

                XmlAttribute outcome = xmlDocument.CreateAttribute("outcome");
               
                outcome.Value = item.Attributes["outcome"].Value;
                XmlAttribute duration = xmlDocument.CreateAttribute("duration");
                
                duration.Value = item.Attributes["duration"].Value;
                resultNode.Attributes.Append(className);
                resultNode.Attributes.Append(outcome);
                resultNode.Attributes.Append(duration);
                rootNode.AppendChild(resultNode);

            }

            xmlDocument.Save(resultFileName);
            return "Logged SucessFully";
        }
        [Function("GenerateIntegrationResult")]
        public void GenerateIntegrationResult(string standardResultPath, string recentResultFilePath)
        {
            //string standardResultPath = @"C:\UnitTestResults\IntegrationResults";
            //string recentResultFilePath = @"C:\UnitTestResults\1.0.5.2.0.2014081343\results.xml";
            if (!Directory.Exists(standardResultPath))
                Directory.CreateDirectory(standardResultPath);
            DirectoryInfo resultDirectory = new DirectoryInfo(standardResultPath);
            bool isResultGenerated = false;
            StringBuilder innerHtml = new StringBuilder();
            string defaultStyle = "style='background-color: #FFFFFF;'";
            string newTestStyle = "style='background-color: #00FF1E;'";
            string increaseTimeStyle = "style='background-color: #A41E0F; color: #FFFFFF;'";
            foreach (FileInfo file in resultDirectory.GetFiles("*.xml"))
            {

                if (!isResultGenerated && File.Exists(recentResultFilePath))
                {
                    XmlDocument sourceResult = new XmlDocument();
                    sourceResult.Load(recentResultFilePath);
                    XmlDocument destinationResult = new XmlDocument();
                    destinationResult.Load(standardResultPath + "\\results.xml");
                    foreach (XmlNode sourceNode in sourceResult.DocumentElement.SelectNodes("/Results/TestMethod"))
                    {
                        string testName = sourceNode.Attributes["TestName"].Value;
                        string sourceDuration = sourceNode.Attributes["duration"].Value;
                        string selectedStyle = string.Empty;
                        TimeSpan souceTime = TimeSpan.Parse(sourceDuration);
                        TimeSpan destinationTime;
                        XmlNode destinationNode = destinationResult.DocumentElement.SelectSingleNode(string.Format("/Results/TestMethod[@TestName='{0}']", testName));
                        string destinationDuration = string.Empty;
                        if (destinationNode != null)
                        {
                            destinationDuration = destinationNode.Attributes["duration"].Value;
                            destinationTime = TimeSpan.Parse(destinationDuration);
                            if (souceTime == destinationTime)
                                selectedStyle = defaultStyle;
                            else
                                selectedStyle = increaseTimeStyle;
                        }
                        else
                        {
                            selectedStyle = newTestStyle;
                        }
                        innerHtml.AppendFormat("<tr {0} ><td>{1}</td><td>{2}</td><td>{3}</td></tr>", selectedStyle, testName, destinationDuration, sourceDuration);
                    }
                    isResultGenerated = true;
                }
            }
            if (isResultGenerated && innerHtml.Length > 0)
            {
                string tblHeader = "<table cellpadding='2' cellspacing='2' border='1' style='border-style: 2; font-family: Verdana, Geneva, Tahoma, sans-serif; font-size: 12px;'>";
                tblHeader += "<tr style='background-color: #11B1FF; font-weight: bold;'>";
                tblHeader += "<td>Test Method Name</td>";
                tblHeader += "<td>Previous Run Duration</td>";
                tblHeader += "<td>Current Run Duration</td></tr>";
                innerHtml.Insert(0, tblHeader);
                innerHtml.Append("</table>");
                foreach (FileInfo file in resultDirectory.GetFiles("*.xml"))
                {
                    file.Delete();
                }
                File.Move(recentResultFilePath, standardResultPath + "\\results.xml");
                using (FileStream htmlStream = new FileStream(standardResultPath + "\\"+ DateTime.Now.ToFileTime() + ".htm", FileMode.Create))
                {
                    using (StreamWriter htmlWriter = new StreamWriter(htmlStream, Encoding.UTF8))
                    {
                        htmlWriter.WriteLine(innerHtml.ToString());
                    }
                }
            }
            else if (!isResultGenerated)
            {
                File.Move(recentResultFilePath, standardResultPath + "\\results.xml");
            }


        }
			]]>
    </code>
  </script>
  <target name="Main Build">
    <!--<setinformationalversion productname="${productName}" newbuildnumber="${NewBuildNumber}">
      <fileset basedir="${projectRootPath}\">
        <include name="**/AssemblyInfo.*"/>
        <exclude name="**/Shared/**"/>
      </fileset>
    </setinformationalversion>-->
    <call target="CompileAll" />
    <!--<call target="QunitTest" />-->
    <call target="Execute Integration Unit Test"/>
    <!--<call target="Cleanup" />-->

    <!--<call target="Copy Files" />
    <call target="Zip" />-->
  </target>

  <target name="CompileAll">
    <echo>Compile solution...</echo>
    <exec program="${devEnvPath}">
      <arg value="${ProjectCodePath}\DataLabsXC.IntegrationTest.sln"/>
      <arg value="/Rebuild"/>
      <arg value="${build.configuration}"/>
    </exec>
  </target>

  <target name="Execute Integration Unit Test">
    <echo>
      Deleting Unit Test Results file
    </echo>
    <delete file="${UnitTestResultFilePath}" />
    <echo message="path testfile ${projectRootPath}\${TestDefinitionFilePath}"/>
    <echo>Running Unit Test</echo>
    <echo message=" File path ${projectRootPath}\${TestDefinitionFilePath}"/>
    <mkdir dir="${path::get-directory-name(UnitTestResultFilePath)}"
   if="${not directory::exists(path::get-directory-name(UnitTestResultFilePath))}" />

    <echo message="Executing ${TestsToExecute} ..." />
    <foreach item="String" in="${TestsToExecute}" delim="," property="count">
      <xmlpeek file="${projectRootPath}\${TestDefinitionFilePath}" xpath="BuildDefinition/TestDefinitionConfiguration/Test[${count}]/@Name" property="IntegrationTestName" />
      <echo message="${IntegrationTestName}" />

      <xmlpeek file="${projectRootPath}\${TestDefinitionFilePath}" xpath="BuildDefinition/TestDefinitionConfiguration/Test[${count}]/@TestContainer" property="IntegrationTestContainer" />
      <echo message="${IntegrationTestContainer}" />

      <xmlpeek file="${projectRootPath}\${TestDefinitionFilePath}" xpath="BuildDefinition/TestDefinitionConfiguration/Test[${count}]/@Category" property="IntegrationTestCategory" failonerror="false" verbose="true" />
      <echo message="${IntegrationTestCategory}" />

      <echo message="Executing ${IntegrationTestContainer} ..." />

      <choose>
        <when test="${string::get-length(IntegrationTestCategory) > 0}">
          <exec program="${msTestPath}">
            <arg value="/testcontainer:${projectRootPath}\${IntegrationTestContainer}" />
            <arg value="/testsettings:${projectRootPath}\DataLabsXC.IntegrationTest\\DataLabsXC.IntegrationTest\TestSettingsx64.testsettings " />
            <arg value="/resultsfile:${UnitTestResultFilePath}" />
            <arg value="/category:${IntegrationTestCategory}" />
            <arg value="/detail:errormessage" />
            <arg value="/detail:errorstacktrace" />
            <arg value="/detail:debugtrace" />
            <arg value="/detail:traceinfo" />
            <arg value="/detail:duration" />
          </exec>
        </when>
        <otherwise>
          <exec program="${msTestPath}">
            <arg value="/testcontainer:${projectRootPath}\${IntegrationTestContainer}" />
            <arg value="/testsettings:${projectRootPath}\DataLabsXC.IntegrationTest\\DataLabsXC.IntegrationTest\TestSettingsx64.testsettings " />
            <arg value="/resultsfile:${UnitTestResultFilePath}" />
            <arg value="/detail:errormessage" />
            <arg value="/detail:errorstacktrace" />
            <arg value="/detail:debugtrace" />
            <arg value="/detail:traceinfo" />
            <arg value="/detail:duration" />
          </exec>
        </otherwise>

      </choose>
      <echo message='${MyMethods::SimpleFunction()}'/>
      <echo message='${MyMethods::GetResults(UnitTestResultFilePath,UnitTestResultLogFilePath)}'/>
      <delete file="${UnitTestResultFilePath}" />
 
    </foreach>
  </target>
  <target name="GenerateIntegrationTestPerformanceResults">
    <echo message='Generating IntegrationTest Performance Results '/>
    <echo message='${MyMethods::GenerateIntegrationResult(StandardIntegrationResultFolder,UnitTestResultLogFilePath)}'/>
  </target>

  <target name="Cleanup">
    <echo>Cleaning...</echo>

    <!-- from the parent folder down delete everything else
         this will insure, the previous zip file in sibling folders get removed -->
    <delete>
      <!-- <fileset basedir="${CDContentPath}">
        <include name="\**"/>
      </fileset>-->
    </delete>
  </target>

</project>

